/*
 * The MIT License
 *
 * Copyright 2014 Tavo.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package BD;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Statement;
import java.util.LinkedList;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 * @author Tavo
 */
public class BDUI extends javax.swing.JFrame 
{

    /*
     * Variables Globables
     */
    String Hostname;
    String Puerto;
    String Database;
    String Username;
    String Password;
    Connection connection;
    DefaultListModel Lista1;//Lista usada para poblar la Jlist listaAtributos1
    DefaultListModel Lista2;//Lista usada para poblar la JList ListaAtributos2
    String TablaActual;//Nombre de la tabla seleccionada
    DefaultTableModel ModeloTabla;//modelo que se le asignara a la tablaDatos
    DefaultTableModel ModeloFiltro;//modelo que se le asignara a la tablaFiltros
    LinkedList<Campo> listaCampos = new LinkedList<>();     
    String consulta;
    
    /**
     * Creates new form BDUI
     */
    public BDUI() 
    {
        initComponents();
        Hostname = "";
        Puerto = "";
        Database = "";
        Username = "";
        Password = "";
        connection = null;
        Vistas.pack();//para que la ventana no aparezca pequeña
        Filtros.pack();//para que la ventana (jframe) no aparezca pequeña
        Lista1 = new DefaultListModel();
        Lista2 = new DefaultListModel();
        listaAtributos1.setModel(Lista1);
        listaAtributos2.setModel(Lista2);
        TablaActual = "";        
        ModeloTabla = new DefaultTableModel();        
        ModeloFiltro = new DefaultTableModel();
        String idColumnas[] = {"Tipo","Campo","Operador","Valor"};
        ModeloFiltro.setColumnIdentifiers(idColumnas);
        tablaFiltros.setModel(ModeloFiltro);
        consulta = "";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Vistas = new javax.swing.JFrame();
        jLabel7 = new javax.swing.JLabel();
        comboBoxBasedatos = new javax.swing.JComboBox();
        botonMostrarTablas = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        comboBoxTablas = new javax.swing.JComboBox();
        botonMostrarAtributos = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listaAtributos1 = new javax.swing.JList();
        botonAgregarAtributo = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        listaAtributos2 = new javax.swing.JList();
        botonQuitarAtributo = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tablaDatos = new javax.swing.JTable();
        botonMostrarTuplas = new javax.swing.JButton();
        botonVerFiltros = new javax.swing.JButton();
        botonCrearArchivo = new javax.swing.JButton();
        botonCancelarVistas = new javax.swing.JButton();
        Filtros = new javax.swing.JFrame();
        jLabel11 = new javax.swing.JLabel();
        comboBoxCampos = new javax.swing.JComboBox();
        jLabel12 = new javax.swing.JLabel();
        comboBoxOperador = new javax.swing.JComboBox();
        jLabel13 = new javax.swing.JLabel();
        textFieldValor = new javax.swing.JTextField();
        botonAgregarFiltro = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tablaFiltros = new javax.swing.JTable();
        jLabel14 = new javax.swing.JLabel();
        botonAceptarFiltro = new javax.swing.JButton();
        botonCancelarFiltro = new javax.swing.JButton();
        botonEliminarFiltro = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        textFieldHostname = new javax.swing.JTextField();
        textFieldPuerto = new javax.swing.JTextField();
        textFieldBasedatos = new javax.swing.JTextField();
        textFieldUsuario = new javax.swing.JTextField();
        botonIngresar = new javax.swing.JButton();
        textFieldPassword = new javax.swing.JPasswordField();
        botonCancelar = new javax.swing.JButton();

        jLabel7.setText("Seleccione Basedatos:");

        botonMostrarTablas.setText("Mostrar Tablas");
        botonMostrarTablas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonMostrarTablasActionPerformed(evt);
            }
        });

        jLabel8.setText("Seleccione Tabla:");

        botonMostrarAtributos.setText("Mostrar Atributos");
        botonMostrarAtributos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonMostrarAtributosActionPerformed(evt);
            }
        });

        jLabel9.setText("Atributos:");

        listaAtributos1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(listaAtributos1);

        botonAgregarAtributo.setText("-->");
        botonAgregarAtributo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAgregarAtributoActionPerformed(evt);
            }
        });

        listaAtributos2.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(listaAtributos2);

        botonQuitarAtributo.setText("<--");
        botonQuitarAtributo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonQuitarAtributoActionPerformed(evt);
            }
        });

        jLabel10.setText("Tuplas:");

        tablaDatos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(tablaDatos);

        botonMostrarTuplas.setText("Mostrar Tuplas");
        botonMostrarTuplas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonMostrarTuplasActionPerformed(evt);
            }
        });

        botonVerFiltros.setText("Agregar Filtro");
        botonVerFiltros.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonVerFiltrosActionPerformed(evt);
            }
        });

        botonCrearArchivo.setText("Crear Archivo");
        botonCrearArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCrearArchivoActionPerformed(evt);
            }
        });

        botonCancelarVistas.setText("Cancelar");
        botonCancelarVistas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCancelarVistasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout VistasLayout = new javax.swing.GroupLayout(Vistas.getContentPane());
        Vistas.getContentPane().setLayout(VistasLayout);
        VistasLayout.setHorizontalGroup(
            VistasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(VistasLayout.createSequentialGroup()
                .addGroup(VistasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(VistasLayout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addGroup(VistasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(botonVerFiltros, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(VistasLayout.createSequentialGroup()
                                .addGroup(VistasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(botonAgregarAtributo)
                                    .addComponent(botonQuitarAtributo))
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(botonMostrarTuplas, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20))
                    .addGroup(VistasLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(VistasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(VistasLayout.createSequentialGroup()
                                .addGroup(VistasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9)
                                    .addGroup(VistasLayout.createSequentialGroup()
                                        .addGroup(VistasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel7)
                                            .addComponent(jLabel8))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(VistasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(comboBoxTablas, 0, 207, Short.MAX_VALUE)
                                            .addComponent(comboBoxBasedatos, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGap(18, 18, 18)
                                        .addGroup(VistasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(botonMostrarAtributos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(botonMostrarTablas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, VistasLayout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(botonCrearArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(botonCancelarVistas, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(VistasLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(VistasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(VistasLayout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                .addContainerGap())
        );
        VistasLayout.setVerticalGroup(
            VistasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(VistasLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(VistasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(comboBoxBasedatos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonMostrarTablas))
                .addGap(18, 18, 18)
                .addGroup(VistasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addGroup(VistasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(comboBoxTablas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(botonMostrarAtributos)))
                .addGap(35, 35, 35)
                .addComponent(jLabel9)
                .addGap(18, 18, 18)
                .addGroup(VistasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(VistasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane2)
                        .addComponent(jScrollPane1))
                    .addGroup(VistasLayout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(botonAgregarAtributo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(botonQuitarAtributo)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonVerFiltros)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(botonMostrarTuplas)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addGroup(VistasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, VistasLayout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(53, 53, 53))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, VistasLayout.createSequentialGroup()
                        .addGroup(VistasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(botonCancelarVistas)
                            .addComponent(botonCrearArchivo))
                        .addContainerGap())))
        );

        jLabel11.setText("Seleccione Campo:");

        jLabel12.setText("Operador:");

        comboBoxOperador.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "=", "<", ">", "<=", ">=", "<>" }));

        jLabel13.setText("Ingrese Valor:");

        botonAgregarFiltro.setText("Agregar");
        botonAgregarFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAgregarFiltroActionPerformed(evt);
            }
        });

        tablaFiltros.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane4.setViewportView(tablaFiltros);

        jLabel14.setText("Filtros:");
        jLabel14.setToolTipText("");

        botonAceptarFiltro.setText("Aceptar");
        botonAceptarFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonAceptarFiltroActionPerformed(evt);
            }
        });

        botonCancelarFiltro.setText("Cancelar");
        botonCancelarFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCancelarFiltroActionPerformed(evt);
            }
        });

        botonEliminarFiltro.setText("Eliminar");
        botonEliminarFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonEliminarFiltroActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout FiltrosLayout = new javax.swing.GroupLayout(Filtros.getContentPane());
        Filtros.getContentPane().setLayout(FiltrosLayout);
        FiltrosLayout.setHorizontalGroup(
            FiltrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FiltrosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(FiltrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(FiltrosLayout.createSequentialGroup()
                        .addGroup(FiltrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(botonAceptarFiltro))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(FiltrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(FiltrosLayout.createSequentialGroup()
                                .addComponent(botonCancelarFiltro)
                                .addGap(9, 9, 9))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, FiltrosLayout.createSequentialGroup()
                                .addComponent(botonEliminarFiltro)
                                .addContainerGap())))
                    .addGroup(FiltrosLayout.createSequentialGroup()
                        .addGroup(FiltrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(FiltrosLayout.createSequentialGroup()
                                .addGroup(FiltrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel12)
                                    .addComponent(jLabel13))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(FiltrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(comboBoxCampos, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(comboBoxOperador, 0, 207, Short.MAX_VALUE)
                                    .addComponent(textFieldValor))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(botonAgregarFiltro))
                            .addComponent(jLabel14))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );
        FiltrosLayout.setVerticalGroup(
            FiltrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(FiltrosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(FiltrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(comboBoxCampos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(FiltrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(comboBoxOperador, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(FiltrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(textFieldValor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(botonAgregarFiltro))
                .addGap(18, 18, 18)
                .addComponent(jLabel14)
                .addGap(18, 18, 18)
                .addGroup(FiltrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(FiltrosLayout.createSequentialGroup()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(FiltrosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(botonAceptarFiltro)
                            .addComponent(botonCancelarFiltro)))
                    .addComponent(botonEliminarFiltro))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Ingrese la información para conectar a Postgresql.");

        jLabel2.setText("Hostname:");

        jLabel3.setText("Puerto:");

        jLabel4.setText("Basedatos:");

        jLabel5.setText("Usuario:");

        jLabel6.setText("Contraseña:");

        textFieldHostname.setText("localhost");

        textFieldPuerto.setText("5432");

        textFieldBasedatos.setText("postgres");

        textFieldUsuario.setText("postgres");

        botonIngresar.setText("Ingresar");
        botonIngresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonIngresarActionPerformed(evt);
            }
        });

        botonCancelar.setText("Cancelar");
        botonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel2)
                                        .addComponent(jLabel3))
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(textFieldHostname)
                                        .addComponent(textFieldPuerto, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel5)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(textFieldUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addGap(18, 18, 18)
                                        .addComponent(textFieldBasedatos, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(textFieldPassword))))
                            .addComponent(jLabel1)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(85, 85, 85)
                        .addComponent(botonIngresar)
                        .addGap(32, 32, 32)
                        .addComponent(botonCancelar)))
                .addContainerGap(50, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(textFieldHostname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(textFieldPuerto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(textFieldBasedatos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(textFieldUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(textFieldPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonIngresar)
                    .addComponent(botonCancelar))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonIngresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonIngresarActionPerformed
        Hostname = textFieldHostname.getText();
        Puerto = textFieldPuerto.getText();
        Database = textFieldBasedatos.getText();
        Username = textFieldUsuario.getText();
        Password = textFieldPassword.getText();
        conectarPostgresql();
    }//GEN-LAST:event_botonIngresarActionPerformed

    private void botonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCancelarActionPerformed
        this.dispose();
    }//GEN-LAST:event_botonCancelarActionPerformed

    private void botonMostrarTablasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonMostrarTablasActionPerformed
        if(comboBoxBasedatos.getItemCount() > 0)
        {
            mostrarTablas();
        }
    }//GEN-LAST:event_botonMostrarTablasActionPerformed

    private void botonMostrarAtributosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonMostrarAtributosActionPerformed
        if(comboBoxTablas.getItemCount() > 0)
        {
            Lista1.clear();
            Lista2.clear();
            comboBoxCampos.removeAllItems();
            listaAtributos1.updateUI();
            listaAtributos2.updateUI();
            ModeloTabla = new DefaultTableModel();
            tablaDatos.setModel(ModeloTabla);
            tablaDatos.updateUI();
            mostrarAtributos();
        }
    }//GEN-LAST:event_botonMostrarAtributosActionPerformed

    private void botonAgregarAtributoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAgregarAtributoActionPerformed
        //primero verificamos que la lista no este vacia para poder agregar un atributo a la otra lista
        if(!Lista1.isEmpty())
        {
            int[] listaIndices1 = listaAtributos1.getSelectedIndices();
            for(int i = 0; i < listaIndices1.length; i++)
            {
                //System.out.println("Se va a mover el atributo: " + Lista1.getElementAt(listaIndices1[i]));
                Lista2.addElement(Lista1.getElementAt(listaIndices1[i]));                                                
                Lista1.removeElementAt(listaIndices1[i]);                                                                
                
                listaAtributos1.updateUI();
                listaAtributos2.updateUI();
            }
        }
    }//GEN-LAST:event_botonAgregarAtributoActionPerformed

    private void botonQuitarAtributoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonQuitarAtributoActionPerformed
        //primero validamos que la lista este poblada antes de quitar un atributo
        if(!Lista2.isEmpty())
        {
            int[] listaIndices2 = listaAtributos2.getSelectedIndices();
            for(int i = 0; i < listaIndices2.length; i++)
            {
                Lista1.addElement(Lista2.getElementAt(listaIndices2[i]));
                Lista2.removeElementAt(listaIndices2[i]);
                listaAtributos1.updateUI();
                listaAtributos2.updateUI();
            }
        }
    }//GEN-LAST:event_botonQuitarAtributoActionPerformed

    private void botonMostrarTuplasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonMostrarTuplasActionPerformed
        if(!Lista2.isEmpty())
        {
            mostrarTuplas();
        }
    }//GEN-LAST:event_botonMostrarTuplasActionPerformed

    private void botonVerFiltrosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonVerFiltrosActionPerformed
        comboBoxCampos.removeAllItems();
        for(int i=0; i<Lista2.getSize(); i++){
            comboBoxCampos.addItem(Lista2.getElementAt(i));
        }
        Filtros.setVisible(true);
    }//GEN-LAST:event_botonVerFiltrosActionPerformed

    private void botonAgregarFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAgregarFiltroActionPerformed
        // TODO add your handling code here:
        String campo = comboBoxCampos.getSelectedItem().toString();        
        String tipo = getTipoDato(campo);        
        String operador = comboBoxOperador.getSelectedItem().toString();
        String valor = textFieldValor.getText();
        
        boolean flag_repetido = false;
        boolean flag_error = false;
        
        //Se verifica si ya existe un filtro con campo seleccionado
        for(int i=0; i<ModeloFiltro.getRowCount(); i++){
            if(ModeloFiltro.getValueAt(i, 0).equals(campo)){
               flag_repetido = true; 
            }
        }
        
        //Comparacion de tipo de datos
        if(operador.equals("=") || operador.equals("<>")){
            if(tipo.contains("char") || tipo.equals("text") || tipo.contains("time") || tipo.contains("date")){
                valor = "'" + valor + "'";
            }
        }else{
            if(tipo.contains("char") || tipo.equals("text")){
                textFieldValor.setText("");
                flag_error = true;
                JOptionPane.showMessageDialog(this.Filtros, "El operador "+operador+" no puede ser asignado al tipo de dato "+tipo,"",JOptionPane.ERROR_MESSAGE);
            }
        }
        
        if(!flag_repetido){
            if(!flag_error){
                String[] filtro = {tipo,campo,operador,valor};
                agregarFiltro(filtro);
            }
        }else{
            JOptionPane.showMessageDialog(this.Filtros, "El filtro seleccionado ya existe","",JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_botonAgregarFiltroActionPerformed

    private void botonCancelarFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCancelarFiltroActionPerformed
        // TODO add your handling code here:
        Filtros.setVisible(false);
    }//GEN-LAST:event_botonCancelarFiltroActionPerformed

    private void botonEliminarFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonEliminarFiltroActionPerformed
        // TODO add your handling code here:
        try{
            ModeloFiltro.removeRow(tablaFiltros.getSelectedRow());
        }catch(Exception e){}
    }//GEN-LAST:event_botonEliminarFiltroActionPerformed

    private void botonAceptarFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonAceptarFiltroActionPerformed
        // TODO add your handling code here:        
        consulta = "SELECT ";
        //Campos
        for(int i=0; i<Lista2.getSize(); i++){
            if(i==0){
                consulta += Lista2.getElementAt(i).toString();
            }else{
                consulta += ", "+Lista2.getElementAt(i).toString();
            }
        }
        //Filtros
        consulta += " FROM " + TablaActual;
        for(int i=0; i<ModeloFiltro.getRowCount(); i++){
            if(i==0){
                consulta += " WHERE ";
                
            }else{
                consulta += " AND ";
            }
            consulta += ModeloFiltro.getValueAt(i, 1).toString();
            consulta += ModeloFiltro.getValueAt(i, 2).toString();
            consulta += ModeloFiltro.getValueAt(i, 3).toString();
        }        
        mostrarTuplas();
        Filtros.setVisible(false);
    }//GEN-LAST:event_botonAceptarFiltroActionPerformed

    private void botonCrearArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCrearArchivoActionPerformed
        // TODO add your handling code here:        
        
    }//GEN-LAST:event_botonCrearArchivoActionPerformed

    private void botonCancelarVistasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCancelarVistasActionPerformed
        // TODO add your handling code here:       
        Vistas.setVisible(false);
        this.setVisible(true);
    }//GEN-LAST:event_botonCancelarVistasActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) 
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BDUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BDUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BDUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BDUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BDUI().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFrame Filtros;
    private javax.swing.JFrame Vistas;
    private javax.swing.JButton botonAceptarFiltro;
    private javax.swing.JButton botonAgregarAtributo;
    private javax.swing.JButton botonAgregarFiltro;
    private javax.swing.JButton botonCancelar;
    private javax.swing.JButton botonCancelarFiltro;
    private javax.swing.JButton botonCancelarVistas;
    private javax.swing.JButton botonCrearArchivo;
    private javax.swing.JButton botonEliminarFiltro;
    private javax.swing.JButton botonIngresar;
    private javax.swing.JButton botonMostrarAtributos;
    private javax.swing.JButton botonMostrarTablas;
    private javax.swing.JButton botonMostrarTuplas;
    private javax.swing.JButton botonQuitarAtributo;
    private javax.swing.JButton botonVerFiltros;
    private javax.swing.JComboBox comboBoxBasedatos;
    private javax.swing.JComboBox comboBoxCampos;
    private javax.swing.JComboBox comboBoxOperador;
    private javax.swing.JComboBox comboBoxTablas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JList listaAtributos1;
    private javax.swing.JList listaAtributos2;
    private javax.swing.JTable tablaDatos;
    private javax.swing.JTable tablaFiltros;
    private javax.swing.JTextField textFieldBasedatos;
    private javax.swing.JTextField textFieldHostname;
    private javax.swing.JPasswordField textFieldPassword;
    private javax.swing.JTextField textFieldPuerto;
    private javax.swing.JTextField textFieldUsuario;
    private javax.swing.JTextField textFieldValor;
    // End of variables declaration//GEN-END:variables

    /*
     * Procedimiento usado para conectar a la base de datos, esta conexión se hace para obtener los nombres de las bases de datos actuales.
     * La conexión se guarda en la variable 'connection'
     * Nota: la cadena de conexión no tiene nombre de BD a conectarse
     */
    private void conectarPostgresql()
    {
        try
        {
            Class.forName("org.postgresql.Driver");
            String cadenaConexion = "jdbc:postgresql://" + Hostname + ":" + Puerto + "/";// + Database;
            connection = DriverManager.getConnection(cadenaConexion, Username, Password);
            JOptionPane.showMessageDialog(this, "Conexión exitosa.");
            mostrarVistas();
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(this, "Error en la conexión.");
        }
    }
    
    /*
     * Procedimiento para poblar el JComboBox comboBoxBasedatos con los nombres de la bases de datos de la actual conexión
     */
    private void mostrarVistas()
    {
        Vistas.setVisible(true);        
        try
        {
            Statement query = connection.createStatement();
            ResultSet resultado = query.executeQuery("SELECT datname FROM pg_database WHERE datistemplate = false;");
            while(resultado.next())
            {
                comboBoxBasedatos.addItem(resultado.getObject(1));
            }
        }
        catch(Exception e){System.err.println("error en vistas");}
    }
    
    /*
     * Procedimiento usado para poblar el comboBoxTablas con las tablas de la base de datos seleccionada
     * Primero cerramos la conexión anteriormente creado, pues se necesita una nueva que contenga en la cadena de conexión el nombre de la BD
     */
    private void mostrarTablas()
    {
        if(!comboBoxBasedatos.getSelectedItem().equals(""))
        {
            try
            {
                connection.close();
                String cadenaConexion = "jdbc:postgresql://" + Hostname + ":" + Puerto + "/" + comboBoxBasedatos.getSelectedItem().toString();
                connection = DriverManager.getConnection(cadenaConexion, Username, Password);
                                
                Statement query = connection.createStatement();
                ResultSet rs = query.executeQuery("SELECT tablename FROM pg_catalog.pg_tables WHERE schemaname = 'public';");
                while(rs.next())
                {
                    comboBoxTablas.addItem(rs.getObject(1));
                }
            }
            catch(Exception e){System.err.println("error en mostarTablas");}
        }
    }
    
    /*
     * Procedimiento para poblar la primera lista de atributos 'listaAtributos1' con los atributos de la tabla seleccionada
     * Se obtiene el tipo de dato para realizar filtros.
     * Usamos la conexión creado con la BD, del proc. mostrarTablas()
     * Llenamos un DefaultListModel 'Lista1' el cual desupués asignamos al JList
     */
    private void mostrarAtributos()
    {
        if(!comboBoxTablas.getSelectedItem().equals(""))
        {
            try
            {
                Statement query = connection.createStatement();
                TablaActual = comboBoxTablas.getSelectedItem().toString();
                ResultSet rs = query.executeQuery("SELECT column_name, data_type FROM information_schema.columns WHERE table_name = '" + TablaActual + "';");
                Lista1.clear();                             
                while(rs.next())
                {
                    Lista1.addElement(rs.getObject(1));                    
                    Campo campo = new Campo(rs.getObject(1).toString(), rs.getObject(2).toString());                    
                    listaCampos.add(campo);                    
                }
            }
            catch(Exception e){System.err.println("error en MostrarAtributos");}
        }
    }
    
    /*
     * Procedimiento usado para poblar la JTable tablaDatos con los datos de los atributos seleccionados
     * Primero hacemos el query a la BD y con el ResultSet poblamos dicha tabla
     */
    private void mostrarTuplas()
    {   
        ModeloTabla = new DefaultTableModel();
        tablaDatos.setModel(ModeloTabla);
        tablaDatos.updateUI();
        try
        {            
            Statement query = connection.createStatement();
            String cadenaQuery = "";
            if (ModeloFiltro.getRowCount() == 0) {
                cadenaQuery = "SELECT ";
                for (int i = 0; i < Lista2.getSize(); i++) {
                    if (i > 0) {
                        cadenaQuery += ", " + Lista2.getElementAt(i);
                    } else {
                        cadenaQuery += Lista2.getElementAt(i);
                    }
                }
                cadenaQuery += " FROM " + TablaActual + ";";
                //System.out.println("Query: " + cadenaQuery);
            }else{
                cadenaQuery = consulta;
            }
            ResultSet rs = query.executeQuery(cadenaQuery);
            
            ResultSetMetaData meta = rs.getMetaData();
            String cols[] = new String[meta.getColumnCount()];
            for(int j = 0; j < cols.length; ++j)
            {
                cols[j] = meta.getColumnLabel(j+1);
            }
            ModeloTabla.setColumnIdentifiers(cols);
            while(rs.next())
            {
                Object data[] = new Object[cols.length];
                for(int k = 0; k < data.length; ++k)
                {
                    data[k] = rs.getObject(k+1);
                }
                ModeloTabla.addRow(data);
            }
            tablaDatos.setModel(ModeloTabla);
        }
        catch(Exception e){
            System.err.println("error en mostrarTuplas");
            JOptionPane.showMessageDialog(this.Vistas, "Error en la consulta, verifique los valores de filtro","",JOptionPane.ERROR_MESSAGE);
        }
    }        
    
    /*
     * Metodo para obtener el tipo de dato del campo indicado. Se utiliza para
     * realizar filtros de campos.
     */
    private String getTipoDato(String nombreCampo){
        for(int i=0; i<listaCampos.size(); i++){
            Campo campo = listaCampos.get(i);
            if(campo.getNombre().equals(nombreCampo)){
                return campo.getTipoDato();
            }            
        }
        return null;
    }
    
    private void agregarFiltro(String[] filtro){
        ModeloFiltro.addRow(filtro);
    }
}